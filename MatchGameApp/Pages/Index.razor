@page "/"
@using System.Timers

<style>

    .container{
        width:400px;
    }

    button {
        width:100px;
        height:100px;
        font-size:50px;
    }

</style>

<PageTitle>Index</PageTitle>

<h1>TSD2490 – Oblig1.</h1>


<div class="container">
    <div class="row"> //emoji class
        @for (var emojiNumber = 0; emojiNumber < shuffledEmojis.Count; emojiNumber++)
        {
            var emoji = shuffledEmojis[emojiNumber];
            var uniqueDescription = $"Button #{emojiNumber}";
            <div class='col-3'>
                <button @onclick="@(() => ButtonClick(emoji, uniqueDescription))" 
                    type="button" class='btn btn-outline-dark'>
                    <h1>@emoji</h1>
                </button>
            </div>
        }
    </div>
    <div class="row"> //viser matches found
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row"> //viser tid
        <h2>Time: @timeDisplay</h2>
    </div>
    <div class="row"> //viser om man vant eller tapte
        <h2>@resultatMelding</h2>
    </div>
    <div class="row"> //start spill knapp
        <button @onclick="@(() => startButton())">Start spill!</button>
    </div>
</div>

@code {

    List<string> animalEmoji = new List<string>{
        "🐵", "🐵",
        "🦊", "🦊",
        "🐴", "🐴",
        "🐿", "🐿",
        "🦢", "🦢",
        "🐔", "🐔",
        "🦌", "🦌",
        "🐈", "🐈",
    };

    List<string> foodEmoji = new List<string>
    {
        "🍕","🍕",
        "🍔","🍔",
        "🌭","🌭",
        "🍟","🍟",
        "🥓","🥓",
        "🍗","🍗",
        "🍙","🍙",
        "🌮","🌮",
    };

    List<string> fruitEmoji = new List<string>{
        "🍉","🍉",
        "🍎","🍎",
        "🍌","🍌",
        "🍓","🍓",
        "🍑","🍑",
        "🍒","🍒",
        "🍊","🍊",
        "🍇","🍇",
    };

    List<string> shuffledEmojis = new List<string>();
    List<string> pickedList = new List<string>();
    int matchesFound = 0;
    int randomListe = 0;
    Timer timer;
    int tenthsOfSecondsElapsed;
    string timeDisplay;
    string resultatMelding;

    protected override void OnInitialized() //Oppstart av programmet
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
    }

    private void SetUpGame() //Setter opp programmet, gjøres på oppstart og slutten av hvert game
    {
        Random random = new Random();

        randomListe = random.Next(0,3);
        if (randomListe == 0)
        {
            pickedList = animalEmoji;
        }else if(randomListe == 1){
            pickedList = foodEmoji;
        }else if(randomListe == 2)
        {
            pickedList = fruitEmoji;
        }

        shuffledEmojis = pickedList
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 200;
        

    }

    string lastEmojiFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string emoji, string emojiDescription) //Kode for emoji trykking
    {
        if (timer.Enabled)
        {
            

            if (lastEmojiFound == string.Empty)
            {
                lastEmojiFound = emoji;
                lastDescription = emojiDescription;

            }
            else if ((lastEmojiFound == emoji) && (emojiDescription != lastDescription))
            {
                lastEmojiFound = string.Empty;
                shuffledEmojis = shuffledEmojis
                    .Select(a => a.Replace(emoji, string.Empty))
                    .ToList();
                matchesFound++;
                if (matchesFound == 8)
                {
                    timer.Stop();
                    resultatMelding = " You Won! - Play Again?";
                    SetUpGame();
                }
            }
            else
            {
                lastEmojiFound = string.Empty;
            }
        }
    }

    private void startButton() //startknapp
    {
        timer.Start();
        resultatMelding = "";
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e) //timer
    {
        InvokeAsync(() =>
        {
            if (tenthsOfSecondsElapsed > 0)
            {
                tenthsOfSecondsElapsed--;
                timeDisplay = (tenthsOfSecondsElapsed / 10F).ToString("0.0s");

            }
            else
            {
                timer.Stop();
                resultatMelding = " You Lost! - Play Again?";
                SetUpGame();
            }
            StateHasChanged();
        });
    }

}

